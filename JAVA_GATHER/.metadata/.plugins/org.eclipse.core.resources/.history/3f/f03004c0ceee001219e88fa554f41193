package com.JGather;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.logging.Logger;

public class TcpHelp {
	private Socket socket;  
	//private BufferedReader in;  
	//private PrintWriter out; 
	//private BufferedWriter bw;
	//private BufferedReader line;
    private  DataOutputStream dos ;
	private DataInputStream dis ;
	private static  int NETFLAG=1;
	private String SERVERIP="127.0.0.1";
	private int PORT=10001;
    public  TcpHelp(String sServerip ,int Port)  
	{  
    	
    	this.SERVERIP=sServerip;
    	this.PORT= Port;
	} 
    public boolean ConnServer(int nTimeOut)
    {
    	try {
    		socket =new Socket();
        	socket.connect(new InetSocketAddress(SERVERIP, PORT),nTimeOut);
        	dos =new DataOutputStream(socket.getOutputStream());
			dis =new DataInputStream(socket.getInputStream());
		} catch (IOException e) {
			// TODO: handle exception
			e.printStackTrace();
			Closesocket();
			NETFLAG=2;
			return false;
		}
    	return true;
    }
    //得到网络状态
    public int GetNetFlag()
    {
    
    	return NETFLAG;
    }
    public  void SendAllCmd(String s)
    {
    	while(s.indexOf(",")!=-1)
		{
			String scmd=s.substring(0, s.indexOf(","));
			 s=s.substring(s.indexOf(",")+1);
			 System.out.println("scmd="+scmd);
			 System.out.println("s="+s);
			 SendCmdandRecvmsg(scmd);
		}
    }
/*
	1:正常 2:网络不通 3:无返回数据 4:返回数据校验错 8:逻辑删除 9:其他错误)
	97规约：1； 07规约：2； 老电表和水表：0
*/
    public int SendElectCmd(String sCmd,String sRemark,String sGuiyue)
    {
    	
    	return 0;
    }
    public  String SendCmdandRecvmsg(String s)
    {
    	System.out.println("发送信息:"+s);
    	 byte [] send;
    	 String sreturn="";
		 try {
			 send =hexStringToByte(s);
			 dos.write(send);
		    	byte [] recv =new byte[256];
				recv.clone();
				dis.read(recv);
				for (int i = 0; i < sizeof(recv); i++) {
					sreturn += recv[i];
				}
				if(!VerifyRecvData(recv,sizeof(recv)))
				{
					NETFLAG=4;
					return sreturn="error";
				}
				System.out.println("服务器消息 : " + sreturn);
		} catch (IOException e) {
			// TODO: handle exception
			e.printStackTrace();
			NETFLAG=2;
			sreturn="error";
		}catch (Exception e)
		 {   
			 NETFLAG=3;
			 e.printStackTrace();
			 sreturn="error";
		 }
		return sreturn;  
    }

    public String ByteConversionString(byte []pchBuffer, int nLength)
    {
    	String m_strSwapBuff = "";
    	String m_strTempBuff="";	
 
    	for(int i=0; i<nLength; i++)
    	{
    		m_strTempBuff="";
    		m_strTempBuff=String.format("%lx", (pchBuffer[i] & 0xF0) >> 4);
    		m_strSwapBuff += m_strTempBuff;
    		//
    		m_strTempBuff="";
    		m_strTempBuff=String.format("%lx", (pchBuffer[i] & 0x0F));
    		m_strSwapBuff += m_strTempBuff;
    	}	
    	return m_strSwapBuff;
    }
    /*
      解析返回的字符串。
       nRemark  
    */
    public String GetRecvValues(byte[] pchbuffer,int nRecvLen,int nRemark)
    {
       
    	byte[] rc;
    	rc =new byte[nRecvLen];
    	rc.clone();
    	int len;
    	int nstart=0;
    	for (int i=0;i<nRecvLen;i++)
    	{
    		if(pchbuffer[i]==0x68)
    		{
    			nstart=i;
    			break;
    		}
    	}
    	switch (nRemark)
    	{
    	case 0:
    		{
    			 len=pchbuffer[nstart+9]-4;
    			for (int i=0;i<len;i++)
    			{
    				rc[i]=(byte) (pchbuffer[nstart+9+i+5]-0x33);
    			}
    		}
    		break;
    	case  1:
    		{
    			 len=pchbuffer[nstart+9]-2;
    			for (int i=0;i<len;i++)
    			{
    				rc[i]=(byte) (pchbuffer[nstart+9+i+3]-0x33);
    			}
    		}
    		break;
    	case  2:  //水表
    		{   
    			len =4;
    			for (int i=0;i<4;i++)
    			{
    				rc[i]=pchbuffer[nstart+14+i];
    			}
    		}
    		break;
    	default:
    		 len =4;
    		break;
    	}
    	String stmp,sRecv="";
    	for(int i=len-1; i>=0; i--)
    	{
    		
    		stmp=String.format("%02x",rc[i]);
    		sRecv+=stmp;
    	}
    	return sRecv;
    }
    public double GetRecvDoubleValues(String sValues,int nRecvLen,int nRmark,int nIndex)
    {
    	double dValues=0.0;
    	//CString sValues=GetRecvValues(pchbuffer,nRecvLen,nRmark);
    	if(sValues.length()==0) return dValues;
    	dValues=Double.parseDouble(sValues);
    	switch (nIndex)
    	{
    	case 0:
    		dValues=dValues/1;
    		break;
    	case 1:
    		dValues=dValues/10;
    		break;
    	case 2:
    		dValues=dValues/100;
    		break;
    	case 3:
    		dValues=dValues/1000;
    		break;
    	case 4:
    		dValues=dValues/10000;
    		break;
    	default:
    		dValues=dValues/1;
    		break;
    	}
    	return dValues;

    }

    /*
    	解析返回的数据，最高位为正负位
    */
    public String GetRecvValues_plus(byte []pchbuffer,int nRecvLen,int nRemark)
    {
       
    	byte []rc;
    	rc =new byte[nRecvLen];
    	rc.clone();
    	int len;
    	int nstart=0;
    	for (int i=0;i<nRecvLen;i++)
    	{
    		if(pchbuffer[i]==0x68)
    		{
    			nstart=i;
    			break;
    		}
    	}
    	byte uc = 0;
    	switch (nRemark)
    	{
    	case 0:
    		{
    			 len=pchbuffer[nstart+9]-4;
    			for (int i=0;i<len;i++)
    			{
    				rc[i]=(byte) (pchbuffer[nstart+9+i+5]-0x33);
    			}
    			uc=(byte) (rc[len-1]&0x80);
    			if(uc!=0x00)
    			{
    			   rc[len-1]=(byte) (rc[len-1]&0x7F);
    			}
    		}
    		break;
    	case  1:
    		{
    			 len=pchbuffer[nstart+9]-2;
    			for (int i=0;i<len;i++)
    			{
    				rc[i]=(byte) (pchbuffer[nstart+9+i+3]-0x33);
    			}
    			uc=(byte) (rc[len-1]&0x80);
    			if(uc!=0x00)
    			{
    			   rc[len-1]=(byte) (rc[len-1]&0x7F);
    			}
    		}
    		break;
    	case  2:
    		{   
    			len =4;
    			for (int i=0;i<4;i++)
    			{
    				rc[i]=(byte) (pchbuffer[nstart+14+i]-0x33);
    			}
    			uc=(byte) (rc[len-1]&0x80);
    			if(uc!=0x00)
    			{
    			   rc[len-1]=(byte) (rc[len-1]&0x7F);
    			}
    		}
    		break;
    	default:
    		 len =4;
    		break;
    	}
    	String stmp,sRecv="";
    	for(int i=len-1; i>=0; i--)
    	{
    		stmp=String.format("%02x",rc[i]);
    		sRecv+=stmp;
    	}
    	if(uc!=0x00)
    	{
    		sRecv="-"+sRecv;
    	}
    	return sRecv;
    }
    /*
    校验返回的数据
    FEFEFEFE685100260811206891083334333333333333B216   2007
    6847490211000068810643C333333333CC16    1997
    fefefe68110801002000200768a414143343333357453956563745533232323257443317d616  水表
    */
    public Boolean VerifyRecvData(byte []uRecvData,int nRecvLen)
    {
    	Boolean bFlag=false;
    	byte[] rc;
    	rc =new byte[nRecvLen];
    	rc.clone();
    	rc=uRecvData;
    	int ntotal=0;
    	int nResult=0;
    	int nEnd=nRecvLen-1;
    	int nstart=0;
    	/*
    	for(int i=nRecvLen-1;i>=0;i--)
    	{
    		if(rc[i]==0x68)
    		{
    			if(rc[i+2]<=0x01) return FALSE;
    		}
    	}
    	*/
    	for (int i=0;i<nRecvLen;i++)
    	{
    		if(rc[i]==0x68)
    		{
    			nstart=i;
    			break;
    		}
    	}

    	for(int i=nRecvLen-1;i>=0;i--)
    	{
    		if(rc[i]==0x16)
    		{
    			nEnd=i;
    			break;
    		}
    	}
    	for (int i=nstart;i<nEnd-1;i++)
    	{
    		ntotal+=rc[i];
    	}
    	nResult=ntotal%256;
    	if(nResult==rc[nEnd-1]) bFlag=true;	
    	return bFlag;
    }
    //关闭socket连接
    public void Closesocket()
    {
    	try {
    		if(dis!=null)
    		{
    			dis.close();
    		}
    		if(dos!=null)
    		{
    			dos.close();
    		}
    		if(socket!=null)
    		{
    			socket.close();
    		}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
    	
    }
    public  byte[] hexStringToByte(String hex) {
        
        int nsLength =hex.length();
        byte[] result = new byte[nsLength/2];
        if(0!=nsLength%2) return null;
        int c =0;
        for(int i=0;i<nsLength;i+=2)
        {
        	String stmp=hex.substring(i,i+2);
        	stmp.trim();
        	result[c++]=(byte)Integer.parseInt(stmp,16);
        } 
        //result[c++]='\n';
        return result;
    }
    private int sizeof(byte[] recv) {
		// TODO Auto-generated method stub
		int nlength=0;
		for(int i=0;i<recv.length;i++)
		{
			nlength=i;
			if(recv[i]==0x16)
				break;
		}
		return nlength+1;
	}
}
